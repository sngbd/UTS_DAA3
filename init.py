import pygame
import sys

WINDOW_WIDTH = 500
WINDOW_HEIGHT = 500

WINDOW = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))

COLUMNS = 25
ROWS = 25

BOX_WIDTH = WINDOW_WIDTH // COLUMNS
BOX_HEIGHT = WINDOW_HEIGHT // ROWS

BLACK = (0, 0, 0)
SLATE = (50, 50, 50)
RED = (200, 0, 0)
GREEN = (0, 200, 0)
BLUE = (0, 0, 200)
CYAN = (0, 200, 200)
GREY = (90, 90, 90)
YELLOW = (200, 200, 0)

grid = []
queue = []
path = []
wall = []

def create_grid(Box):
    for i in range(COLUMNS):
        arr = []
        for j in range(ROWS):
            arr.append(Box(i, j))
        grid.append(arr)

def set_neighbours():
  for i in range(COLUMNS):
      for j in range(ROWS):
          grid[i][j].set_neighbours()


def color():
    for i in range(COLUMNS):
        for j in range(ROWS):
            box = grid[i][j]
            box.draw(WINDOW, SLATE)

            if box.queued:
                box.draw(WINDOW, RED)
            if box.visited:
                box.draw(WINDOW, GREEN)
            if box in path:
                box.draw(WINDOW, BLUE)

            if box.start:
                box.draw(WINDOW, CYAN)
            if box.wall:
                box.draw(WINDOW, GREY)
            if box.target:
                box.draw(WINDOW, YELLOW)

maze_wall = [
    (0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0),
    (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (0, 4), (0, 5), 
    (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), 
    (0, 21), (0, 22), (0, 23), (0, 24), (24, 1), (24, 2), (24, 3), (24, 4), (24, 5), (24, 6), (24, 7), (24, 8), (24, 9), (24, 10), (24, 11), 
    (24, 12), (24, 13), (24, 14), (24, 15), (24, 16), (24, 17), (24, 18), (24, 19), (24, 20), (24, 21), (24, 22), (24, 23), (24, 24), (1, 24), 
    (2, 24), (3, 24), (4, 24), (5, 24), (6, 24), (7, 24), (8, 24), (9, 24), (10, 24), (11, 24), (12, 24), (13, 24), (14, 24), (15, 24), (16, 24),
    (17, 24), (18, 24), (19, 24), (20, 24), (21, 24), (22, 24), (23, 24), (22, 2), (22, 3), (22, 4), (22, 5), (22, 6), (21, 9), (22, 9), 
    (23, 9), (20, 9), (20, 8), (20, 7), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (16, 3), (16, 4), (18, 4), (19, 4), (20, 4), (21, 4), 
    (22, 11), (23, 11), (18, 5), (18, 6), (18, 7), (18, 8), (18, 9), (18, 10), (18, 11), (20, 10), (20, 11), (20, 12), (20, 13), (22, 13), 
    (22, 14), (22, 15), (18, 15), (19, 15), (20, 15), (21, 15), (14, 4), (15, 4), (14, 1), (14, 2), (14, 3), (14, 5), (14, 6), (12, 6), 
    (13, 6), (12, 4), (12, 3), (12, 2), (11, 2), (10, 2), (22, 17), (21, 17), (20, 17), (20, 18), (10, 3), (10, 4), (10, 5), (10, 6), 
    (10, 7), (9, 4), (8, 1), (8, 2), (7, 4), (7, 6), (8, 6), (10, 8), (9, 8), (8, 8), (7, 8), (7, 9), (7, 10), (7, 11), (7, 12), (7, 14), 
    (6, 14), (11, 8), (12, 8), (13, 8), (14, 8), (15, 8), (16, 8), (16, 7), (16, 6), (12, 9), (12, 10), (12, 11), (12, 12), (14, 10), 
    (15, 10), (16, 10), (17, 10), (9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (10, 14), (11, 14), (12, 14), (13, 14), (14, 14), (14, 13), 
    (14, 12), (14, 11), (16, 13), (17, 13), (18, 13), (19, 13), (16, 14), (16, 15), (16, 16), (16, 17), (18, 16), (18, 17), (7, 17), (8, 17), 
    (9, 17), (10, 17), (11, 17), (12, 17), (13, 17), (14, 17), (15, 17), (17, 17), (4, 17), (4, 16), (4, 15), (4, 14), (5, 14), (2, 16), 
    (3, 16), (2, 20), (3, 20), (4, 20), (5, 20), (6, 20), (5, 21), (5, 22), (3, 19), (6, 11), (5, 11), (4, 11), (3, 11), (4, 10), (4, 9), 
    (4, 8), (4, 7), (4, 6), (5, 6), (6, 6), (6, 4), (5, 4), (5, 3), (5, 2), (3, 8), (2, 8), (1, 3), (2, 3), (2, 4), (11, 18), (11, 19), 
    (11, 20), (11, 21), (13, 20), (14, 20), (15, 20), (16, 20), (17, 20), (15, 21), (15, 22), (20, 19), (20, 20), (20, 21), (20, 22), 
    (8, 18), (4, 2), (7, 23), (8, 23), (9, 23), (8, 22)
]

def init_maze():
    start_box = grid[1][23]
    start_box.start = True
    start_box.visited = True
    queue.append(start_box)
    target_box = grid[23][1]
    target_box.target = True
    for w in maze_wall:
        grid[w[0]][w[1]].wall = True
        wall.append((w[0], w[1]))
    return start_box, target_box